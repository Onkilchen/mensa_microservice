openapi: 3.0.1
info:
  title: MensaService
  description:
    This is a server, that caches the meals of a mensa. It can fetch you
    the meals of a certain day or can give you specific details about a meal.
servers:
  - url: http://localhost:8000
tags:
  - name: meals
    description: All the meals for a day
    externalDocs:
      description: Find out more
      url: https://openmensa.org/
  - name: meal
    description: Details for a specific meal
  - name: response
    description: Generates a response to a request
paths:
  /response:
    post:
      tags:
        - response
      summary: Returns Json-Object containing the requested meals
      operationId: generateResponse
      requestBody:
        description: message object, containing the date, filters or a specific meal
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/message"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/APIresponse"
                x-content-type: application/json
        "405":
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
      x-swagger-router-controller: Response
  /meals/{date}:
    get:
      tags:
        - meals
      summary: Finds meals by date
      description: Finds meals with the given date
      operationId: findMealsByDate
      parameters:
        - name: date
          in: path
          description: date value, that is needed to find the meals for this day
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/meals"
                x-content-type: application/json
        "400":
          description: Invalid status value
          content: {}
      x-swagger-router-controller: Meals
  /meals/{date}/filter:
    get:
      tags:
        - meals
      summary: Finds Meals by filter
      description:
        Muliple filters can be provided with comma separated strings. Use
        filter1, filter2, filter3 for testing.
      operationId: findMealsByFilter
      parameters:
        - name: filter
          in: query
          description: filters for the meals, like vegan, vegetarian...
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: date
          in: path
          description: the date for which the meals are supposed to be fetched
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/meals"
                x-content-type: application/json
        "400":
          description: Invalid filter value
          content: {}
      x-swagger-router-controller: Meals
  /meals/{date}/{mealId}:
    get:
      tags:
        - meal
      summary: Find meal by ID
      description: Returns a single meal
      operationId: getMealById
      parameters:
        - name: mealId
          in: path
          description: ID of meal to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
        - name: date
          in: path
          description: the date for which the meals are supposed to be fetched
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/meal"
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Meal not found
          content: {}
      security:
        - api_key: []
      x-swagger-router-controller: Meal
components:
  schemas:
    message:
      type: object
      properties:
        userID:
          type: integer
          format: int64
        message:
          type: string
          description: The initial message of the user
        evaluatedMessage:
          $ref: "#/components/schemas/message_evaluatedMessage"
    APIresponse:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/APIresponse_message"
        response:
          type: string
          description: a nicely formatted string, containing the requested meals
      example:
        response: response
        message:
          evaluatedMessage:
            date: 2000-01-23T04:56:07.000+00:00
            filters: filters
          message: message
          userID: 0
    meals:
      type: array
      items:
        $ref: "#/components/schemas/meals_inner"
    meal:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: name of the meal
        category:
          type: string
          description: category of the meal
        prices:
          $ref: "#/components/schemas/meal_prices"
        notes:
          type: array
          description: Additional details about the meal
          items:
            type: string
      example:
        notes:
          - notes
          - notes
        name: name
        id: 0
        category: category
        prices:
          pupils: 5.962133916683182
          students: 6.027456183070403
          employees: 1.4658129805029452
          others: 5.637376656633329
    message_evaluatedMessage:
      type: object
      properties:
        date:
          type: string
          format: date-time
        filters:
          type: string
          description: filters for meals, seperated by commas
      description: the evaluated method of the NLU
      example:
        date: 2000-01-23T04:56:07.000+00:00
        filters: filters
    APIresponse_message:
      type: object
      properties:
        userID:
          type: integer
          format: int64
        message:
          type: string
          description: The initial message of the user
        evaluatedMessage:
          $ref: "#/components/schemas/message_evaluatedMessage"
      example:
        evaluatedMessage:
          date: 2000-01-23T04:56:07.000+00:00
          filters: filters
        message: message
        userID: 0
    meals_inner:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: name of the meal
        category:
          type: string
          description: category of the meal
        prices:
          type: object
          properties:
            students:
              type: number
            employees:
              type: number
            pupils:
              type: number
            others:
              type: number
          example:
            pupils: 5.962133916683182
            students: 6.027456183070403
            employees: 1.4658129805029452
            others: 5.637376656633329
        notes:
          type: array
          description: Additional details about the meal
          items:
            type: string
      example:
        notes:
          - notes
          - notes
        name: name
        id: 0
        category: category
        prices:
          pupils: 5.962133916683182
          students: 6.027456183070403
          employees: 1.4658129805029452
          others: 5.637376656633329
    meal_prices:
      type: object
      properties:
        students:
          type: number
        employees:
          type: number
        pupils:
          type: number
        others:
          type: number
      example:
        pupils: 5.962133916683182
        students: 6.027456183070403
        employees: 1.4658129805029452
        others: 5.637376656633329
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
